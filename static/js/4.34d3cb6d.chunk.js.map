{"version":3,"sources":["components/slider/SliderCard.js","components/slider/RadioBox.js","redux/actions/actions.js","redux/api.js","components/barchart/BarChartBox.js","components/slider/SliderBox.js","App.js"],"names":["SliderCard","props","Card","sx","maxWidth","mobileWidth","onClick","handleBarClick","CardContent","Typography","fontSize","style","fontWeight","marginRight","selected","temp","IconButton","weather","icon","faCloudversify","faCloudShowersHeavy","faCloudSun","date","RadioBox","this","state","FormControl","component","name","RadioGroup","row","onChange","handleChange","value","FormControlLabel","control","Radio","label","Button","variant","size","refresh","React","Component","getWeather","dispatch","a","type","GET_WEATHER_REQUEST","fetch","response","json","res","GET_WEATHER_SUCCESS","payload","GET_WEATHER_FAIL","margin","top","right","bottom","left","BarChartBox","selectedTime","selectedTemp","barChartWidth","ylabel","width","height","data","time","i","j","length","push","text","getChartData","SliderBox","window","location","reload","selectedDate","show","bind","handleDateTime","tConvert","tempToCelcius","myInput","createRef","todo","e","setState","target","val","weathers","stateProps","allTimes","actualTemp","actualDate","split","filter","item","dt_txt","includes","actualTempArr","main","times","splice","join","convertedActualTime","valNum","Math","round","toString","match","slice","getFullDate","fulldate","Date","dt","getDate","mt","getMonth","yr","getFullYear","marginTop","marginLeft","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","settings","ref","list","map","index","className","connect","ownProps","getWeathersFunc","App"],"mappings":"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","file":"static/js/4.34d3cb6d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography, IconButton } from '@mui/material';\r\nimport { faCloudShowersHeavy, faCloudSun } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCloudversify } from '@fortawesome/free-brands-svg-icons' \r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nfunction SliderCard({...props}) {\r\n    return ( \r\n                                                                                   \r\n        <div>\r\n            <Card sx={{ maxWidth: `${props.mobileWidth}` == 375? 500 : 300}}>\r\n                <div onClick={props.handleBarClick}>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14}}>\r\n                    Temperature                   \r\n                    </Typography>\r\n                    <span style={{ fontSize: 16, fontWeight: 'normal', marginRight: '20px'}}> \r\n                        {props.selected == 'celcius' ? `${props.temp}C` : `${props.temp}F`}\r\n                    </span>\r\n                    <IconButton aria-label=\"add to favorites\">\r\n                    {\r\n                        props.weather === 'Clouds' ? <FontAwesomeIcon icon={faCloudversify} /> :\r\n                        props.weather === 'Rain' ? <FontAwesomeIcon icon={faCloudShowersHeavy} /> :\r\n                        props.weather === 'Clear' ? <FontAwesomeIcon icon={faCloudSun} /> :\r\n                        <FontAwesomeIcon icon={faCloudShowersHeavy} />\r\n\r\n                    } \r\n                    </IconButton> \r\n                    <Typography>\r\n                        {props.date}                  \r\n                    </Typography>\r\n                </CardContent>\r\n            </div>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SliderCard\r\n\r\n","import React from 'react';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Button } from '@mui/material';\r\n\r\nclass RadioBox extends React.Component  {\r\n    \r\n    render() {\r\n        const { selected } = this.props.state;\r\n              \r\n        return (\r\n            <div>\r\n                <FormControl component=\"fieldset\" name=\"temprature\">                \r\n                    <RadioGroup row aria-label=\"temp\" onChange={this.props.handleChange} value={selected}>\r\n                        <FormControlLabel value=\"celcius\" control={<Radio />} label=\"Celcius\" />\r\n                        <FormControlLabel value=\"fahrenheit\" control={<Radio />} label=\"Fahrenheit\" />  \r\n                        <Button variant=\"outlined\" size=\"small\" onClick={this.props.refresh}>Refresh</Button>                  \r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default RadioBox\r\n\r\n","import {\r\n    GET_WEATHER_REQUEST,\r\n    GET_WEATHER_SUCCESS,\r\n    GET_WEATHER_FAIL,\r\n \r\n} from \"../actions/types\";\r\n \r\nimport {\r\n    getWeathers\r\n} from \"../api\";\r\n \r\nconst getWeather = async (dispatch) => {\r\n    dispatch({ type: GET_WEATHER_REQUEST });\r\n \r\n    try {\r\n        const response = await getWeathers();\r\n        const res = await response.json();\r\n        dispatch({ type: GET_WEATHER_SUCCESS, payload: res });\r\n    } catch (e) {\r\n        dispatch({ type: GET_WEATHER_FAIL, payload: e });\r\n    }\r\n};\r\n\r\n \r\nexport const getWeathersFunc = dispatch => {\r\n    return () => getWeather(dispatch);\r\n}","export const getWeathers = () => \r\n        //fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=971aa2c3e7e3c24a9d34b4f0d2bdf88b&cnt=40\");","import React from 'react';\r\nimport BarChart from 'react-bar-chart';\r\n \r\n\r\n \r\nconst margin = {top: 20, right: 20, bottom: 30, left: 40};\r\n \r\nclass BarChartBox extends React.Component{\r\n  constructor() {\r\n    super();\r\n    // this.state = {\r\n    //   width: 0\r\n    // }\r\n   \r\n   \r\n  }\r\n\r\n  render() {\r\n\r\n  const {selectedTime, selectedTemp, barChartWidth} = this.props;\r\n  function getChartData(time, temp){\r\n    const data = [];\r\n    let i = 0; \r\n    let j = 0; \r\n    while (i < time.length) {\r\n      while (j < temp.length){\r\n        data.push({text: time[i], value: temp[j]},)     \r\n        i++;\r\n        j++;\r\n      }    \r\n  }  \r\n  return data\r\n  }\r\n \r\n    return (\r\n        \r\n            <div> \r\n                <BarChart ylabel='Temperature'\r\n                  width={this.props.barChartWidth}\r\n                  height={250}\r\n                  margin={margin}\r\n                  data={getChartData(selectedTime, selectedTemp)}\r\n                  />\r\n            </div>\r\n        \r\n    );\r\n  }\r\n}\r\n \r\nexport default BarChartBox","import React, { Component } from 'react';\r\nimport './Slider.css';\r\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\r\nimport '@splidejs/splide/dist/css/themes/splide-default.min.css';\r\nimport SliderCard from './SliderCard';\r\nimport RadioBox from './RadioBox';\r\nimport { connect } from 'react-redux';\r\nimport { getWeathersFunc } from '../../redux/actions/actions';\r\nimport BarChartBox from '../barchart/BarChartBox';\r\nimport Slider from \"react-slick\";\r\n// import \"~slick-carousel/slick/slick.css\"; \r\n// import \"~slick-carousel/slick/slick-theme.css\";\r\n\r\nclass SliderBox extends Component{ \r\n    constructor(){\r\n        super();\r\n        this.state = { \r\n            selected: \"celcius\" ,\r\n            selectedDate: \"\",\r\n            selectedTime:[],\r\n            selectedTemp: '',\r\n            barChartWidth: 450,\r\n            show:false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateTime = this.handleDateTime.bind(this);\r\n        this.tConvert = this.tConvert.bind(this);\r\n        this.tempToCelcius = this.tempToCelcius.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.myInput = React.createRef()\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.props.todo()\r\n       \r\n    }\r\n    handleChange(e){         \r\n        this.setState({ selected: e.target.value });         \r\n    };\r\n\r\n    handleDateTime(val, weathers){\r\n        let stateProps = weathers;\r\n        let allTimes = [];\r\n        let actualTemp = [];\r\n        let date1 = val.split(' ');\r\n        let actualDate = date1[0];\r\n        stateProps.filter((item)=>{\r\n           if(item.dt_txt.includes(actualDate)){\r\n                let actualTempArr = this.tempToCelcius(item.main.temp);\r\n                let actualTimeArr = item.dt_txt.split(' ');\r\n                let actualTime = actualTimeArr[1];\r\n                let times = actualTime.split(':').splice(0, 2).join(':');                \r\n                let convertedActualTime = this.tConvert(times);\r\n                allTimes.push(convertedActualTime);\r\n                actualTemp.push(actualTempArr);\r\n           }\r\n           return allTimes, actualTemp;\r\n        })\r\n        \r\n        this.setState({ \r\n            selectedTemp: actualTemp,\r\n            selectedTime: allTimes,\r\n        }); \r\n         \r\n    }\r\n\r\n    tempToCelcius(valNum){ \r\n        var temp = null;\r\n        if(this.state.selected === 'celcius'){\r\n            temp = (valNum-273.15);\r\n        } else {\r\n            temp = (valNum-273.15)*9/5 + 32;\r\n        }        \r\n        return Math.round(temp);\r\n    }\r\n\r\n    tConvert(time){\r\n        // Check correct time format and split into components\r\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\r\n      \r\n        if (time.length > 1) { // If time format correct\r\n          time = time.slice (1);  // Remove full string match value\r\n          time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\r\n          time[0] = +time[0] % 12 || 12; // Adjust hours\r\n        }\r\n        return time.join (''); // return adjusted time or original string\r\n    }\r\n\r\n    refresh = () => {\r\n        window.location.reload(false);\r\n    };\r\n\r\n    render() {\r\n        const { selected, selectedTime, selectedTemp, barChartWidth } = this.state;\r\n\r\n        var settings = {\r\n            dots: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 3,\r\n            slidesToScroll: 1,\r\n            initialSlide: 0,\r\n            responsive: [\r\n              {\r\n                breakpoint: 1024,\r\n                settings: {\r\n                  slidesToShow: 3,\r\n                  slidesToScroll: 1,\r\n                  infinite: false,\r\n                  dots: false\r\n                }\r\n              },\r\n              {\r\n                breakpoint: 600,\r\n                settings: {\r\n                  slidesToShow: 2,\r\n                  slidesToScroll: 1,\r\n                  initialSlide: 2\r\n                }\r\n              },\r\n              {\r\n                breakpoint: 480,\r\n                settings: {\r\n                  slidesToShow: 1,\r\n                  slidesToScroll: 1,\r\n                  infinite: false,\r\n                  dots: false\r\n                }\r\n              }\r\n            ]\r\n          };\r\n        \r\n        function getFullDate(val){\r\n            let fulldate = new Date(val);\r\n            let dt = fulldate.getDate();         \r\n            let month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\r\n            let mt = fulldate.getMonth();\r\n            let yr = fulldate.getFullYear();\r\n            return `${dt} ${month[mt]}, ${yr}`;\r\n       } \r\n      \r\n       \r\n        return (\r\n            \r\n            <div style={{marginTop: '5%', marginRight: '10%', marginLeft: '10%'}}> \r\n                <div>\r\n                    <RadioBox state={this.state} handleChange={this.handleChange} refresh={this.refresh}/>\r\n                </div>\r\n                <div>\r\n                <Slider {...settings} ref={this.myInput}>\r\n                    {/* <Splide options={{rewind : false, perPage: `${mobileWidth}` == 375? 1 : 3, perMove: 1, gap : '0px'}}>    */}\r\n                        {this.props && this.props.weathers && this.props.weathers.list && this.props.weathers.list.map((item, index) => (   \r\n                            item.dt_txt.includes('21:00:00') &&\r\n                                // <SplideSlide> \r\n                                \r\n                                    <a onClick={()=>this.handleDateTime(item.dt_txt, this.props.weathers.list)}>\r\n                                        <div style={{margin:'20px'}}>\r\n                                            <SliderCard                                        \r\n                                                selected={selected}\r\n                                                date={getFullDate(item.dt_txt)}\r\n                                                temp={this.tempToCelcius(item.main.temp)}\r\n                                                weather={item.weather[0].main} \r\n                                                handleBarClick={this.handleBarClick}                                                                           \r\n                                            />\r\n                                        </div>\r\n                                    </a>\r\n                                \r\n                        ))}                  \r\n                    </Slider>\r\n                   \r\n                </div>   \r\n                <div className=\"bar-chart\">\r\n                    <BarChartBox \r\n                        selectedTime={selectedTime}\r\n                        selectedTemp={selectedTemp}\r\n                        barChartWidth={barChartWidth}\r\n                    />\r\n                </div>  \r\n            </div>\r\n        );\r\n    } \r\n   \r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weathers : state.todo.data\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        todo: () => dispatch(getWeathersFunc(dispatch))\r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SliderBox)\r\n\r\n","import React from 'react'\nimport './App.css'\nimport SliderBox from './components/slider/SliderBox';\n\n\nclass App extends React.Component {\n  componentDidMount() {\n   // this.props.hideLoader();\n  }  \n  render() { \n    return (\n      <div className=\"App\">      \n          <SliderBox />      \n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}